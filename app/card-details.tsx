import React, { useState } from 'react';
import {\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { \n  ArrowLeft, \n  Star,\n  TrendingUp,\n  TrendingDown,\n  Heart,\n  Share,\n  Plus,\n  Minus,\n  Edit,\n  Eye,\n  Calendar,\n  BarChart3,\n  DollarSign\n} from 'lucide-react-native';\n\nconst { width } = Dimensions.get('window');\n\n// Mock card data with price history\nconst cardDetails = {\n  'svi-025': {\n    name: 'Pikachu ex',\n    number: '025',\n    set: 'Scarlet & Violet Base Set',\n    setCode: 'SVI',\n    rarity: 'Double Rare',\n    type: 'Lightning',\n    hp: '190',\n    artist: 'Atsuko Nishida',\n    releaseDate: '2023-03-31',\n    currentPrice: 15.99,\n    priceChange: '+12.8%',\n    priceChange24h: '+0.85',\n    owned: true,\n    quantity: 1,\n    condition: 'Mint',\n    purchasePrice: 12.50,\n    purchaseDate: '2023-04-15',\n    marketCap: 'High',\n    gradient: ['#F59E0B', '#EAB308'],\n    priceHistory: [\n      { date: '2023-03', price: 18.99 },\n      { date: '2023-04', price: 16.50 },\n      { date: '2023-05', price: 14.25 },\n      { date: '2023-06', price: 13.80 },\n      { date: '2023-07', price: 15.20 },\n      { date: '2023-08', price: 17.50 },\n      { date: '2023-09', price: 16.75 },\n      { date: '2023-10', price: 15.30 },\n      { date: '2023-11', price: 14.90 },\n      { date: '2023-12', price: 15.99 },\n    ],\n    marketStats: {\n      monthlyVolume: 1250,\n      weeklyVolume: 85,\n      totalSales: 3420,\n      averageCondition: 'Near Mint',\n      popularity: 'Very High'\n    },\n    similarCards: [\n      { name: 'Pikachu V', price: 8.99, change: '+5.2%' },\n      { name: 'Pikachu VMAX', price: 12.50, change: '-2.1%' },\n      { name: 'Raichu ex', price: 9.75, change: '+8.3%' }\n    ]\n  }\n};\n\nconst conditionColors = {\n  'Mint': '#10B981',\n  'Near Mint': '#059669',\n  'Lightly Played': '#F59E0B',\n  'Moderately Played': '#EF4444',\n  'Heavily Played': '#DC2626',\n  'Damaged': '#991B1B'\n};\n\nexport default function CardDetails() {\n  const { gameId, setId, cardId } = useLocalSearchParams();\n  const [selectedPeriod, setSelectedPeriod] = useState<'1M' | '3M' | '6M' | '1Y'>('3M');\n  const [isFavorited, setIsFavorited] = useState(false);\n  const [showFullChart, setShowFullChart] = useState(false);\n  \n  const card = cardDetails[cardId as keyof typeof cardDetails];\n  \n  if (!card) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text>Card not found</Text>\n      </SafeAreaView>\n    );\n  }\n\n  const profitLoss = card.currentPrice - card.purchasePrice;\n  const profitLossPercentage = ((profitLoss / card.purchasePrice) / 100);\n  const isProfit = profitLoss > 0;\n\n  // Simple price chart rendering\n  const renderPriceChart = () => {\n    const maxPrice = Math.max(...card.priceHistory.map(p => p.price));\n    const minPrice = Math.min(...card.priceHistory.map(p => p.price));\n    const priceRange = maxPrice - minPrice;\n    \n    return (\n      <View style={styles.chartContainer}>\n        <View style={styles.chartHeader}>\n          <Text style={styles.chartTitle}>Price History</Text>\n          <View style={styles.periodSelector}>\n            {['1M', '3M', '6M', '1Y'].map((period) => (\n              <TouchableOpacity\n                key={period}\n                style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n                onPress={() => setSelectedPeriod(period)}\n              >\n                <Text style={[styles.periodButtonText, selectedPeriod === period && styles.periodButtonTextActive]}>\n                  {period}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n        \n        <View style={styles.chart}>\n          <View style={styles.yAxis}>\n            <Text style={styles.yAxisLabel}>${maxPrice.toFixed(2)}</Text>\n            <Text style={styles.yAxisLabel}>${((maxPrice + minPrice) / 2).toFixed(2)}</Text>\n            <Text style={styles.yAxisLabel}>${minPrice.toFixed(2)}</Text>\n          </View>\n          \n          <View style={styles.chartArea}>\n            <View style={styles.priceLineContainer}>\n              {card.priceHistory.map((point, index) => {\n                const height = ((point.price - minPrice) / priceRange) * 100;\n                const left = (index / (card.priceHistory.length - 1)) * 100;\n                \n                return (\n                  <View\n                    key={index}\n                    style={[\n                      styles.pricePoint,\n                      {\n                        bottom: `${height}%`,\n                        left: `${left}%`,\n                      }\n                    ]}\n                  />\n                );\n              })}\n            </View>\n            \n            <View style={styles.xAxis}>\n              {card.priceHistory.slice(0, 4).map((point, index) => (\n                <Text key={index} style={styles.xAxisLabel}>{point.date}</Text>\n              ))}\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => router.back()}\n          >\n            <ArrowLeft size={24} color=\"#111827\" />\n          </TouchableOpacity>\n          <View style={styles.headerActions}>\n            <TouchableOpacity \n              style={styles.headerAction}\n              onPress={() => setIsFavorited(!isFavorited)}\n            >\n              <Heart size={24} color={isFavorited ? '#EF4444' : '#6B7280'} fill={isFavorited ? '#EF4444' : 'none'} />\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.headerAction}>\n              <Share size={24} color=\"#6B7280\" />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Card Image & Basic Info */}\n        <LinearGradient\n          colors={card.gradient}\n          start={{ x: 0, y: 0 }}\n          end={{ x: 1, y: 1 }}\n          style={styles.cardPreview}\n        >\n          <View style={styles.cardImageContainer}>\n            <View style={styles.cardImagePlaceholder}>\n              <Text style={styles.cardNumberLarge}>#{card.number}</Text>\n            </View>\n            {card.owned && (\n              <View style={styles.ownedBadge}>\n                <Eye size={16} color=\"#FFFFFF\" />\n                <Text style={styles.ownedBadgeText}>Owned</Text>\n              </View>\n            )}\n          </View>\n          \n          <View style={styles.cardBasicInfo}>\n            <Text style={styles.cardName}>{card.name}</Text>\n            <Text style={styles.cardSet}>{card.set} â€¢ {card.setCode}</Text>\n            <View style={styles.cardMeta}>\n              <Text style={styles.cardRarity}>{card.rarity}</Text>\n              <Text style={styles.cardType}>{card.type}</Text>\n              <Text style={styles.cardHp}>{card.hp} HP</Text>\n            </View>\n          </View>\n        </LinearGradient>\n\n        {/* Price Section */}\n        <View style={styles.priceSection}>\n          <View style={styles.priceHeader}>\n            <View>\n              <Text style={styles.currentPrice}>${card.currentPrice}</Text>\n              <View style={styles.priceChangeContainer}>\n                {isProfit ? (\n                  <TrendingUp size={16} color=\"#10B981\" />\n                ) : (\n                  <TrendingDown size={16} color=\"#EF4444\" />\n                )}\n                <Text style={[styles.priceChangeText, { color: isProfit ? '#10B981' : '#EF4444' }]}>\n                  {card.priceChange} ({card.priceChange24h})\n                </Text>\n              </View>\n            </View>\n            \n            {card.owned && (\n              <View style={styles.profitLoss}>\n                <Text style={styles.profitLossLabel}>Your P&L</Text>\n                <Text style={[styles.profitLossValue, { color: isProfit ? '#10B981' : '#EF4444' }]}>\n                  {isProfit ? '+' : ''}${profitLoss.toFixed(2)}\n                </Text>\n                <Text style={styles.purchaseInfo}>Bought at ${card.purchasePrice}</Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {/* Price Chart */}\n        {renderPriceChart()}\n\n        {/* Market Stats */}\n        <View style={styles.marketStats}>\n          <Text style={styles.sectionTitle}>Market Statistics</Text>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <BarChart3 size={20} color=\"#6366F1\" />\n              <Text style={styles.statValue}>{card.marketStats.monthlyVolume}</Text>\n              <Text style={styles.statLabel}>Monthly Volume</Text>\n            </View>\n            <View style={styles.statCard}>\n              <DollarSign size={20} color=\"#10B981\" />\n              <Text style={styles.statValue}>{card.marketStats.totalSales}</Text>\n              <Text style={styles.statLabel}>Total Sales</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Star size={20} color=\"#F59E0B\" />\n              <Text style={styles.statValue}>{card.marketStats.popularity}</Text>\n              <Text style={styles.statLabel}>Popularity</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Calendar size={20} color=\"#8B5CF6\" />\n              <Text style={styles.statValue}>{card.marketStats.weeklyVolume}</Text>\n              <Text style={styles.statLabel}>Weekly Volume</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Card Details */}\n        <View style={styles.cardDetails}>\n          <Text style={styles.sectionTitle}>Card Information</Text>\n          <View style={styles.detailsGrid}>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Artist</Text>\n              <Text style={styles.detailValue}>{card.artist}</Text>\n            </View>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Release Date</Text>\n              <Text style={styles.detailValue}>{new Date(card.releaseDate).toLocaleDateString()}</Text>\n            </View>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Market Cap</Text>\n              <Text style={styles.detailValue}>{card.marketCap}</Text>\n            </View>\n            {card.owned && (\n              <View style={styles.detailRow}>\n                <Text style={styles.detailLabel}>Your Condition</Text>\n                <View style={styles.conditionBadge}>\n                  <View style={[styles.conditionDot, { backgroundColor: conditionColors[card.condition] }]} />\n                  <Text style={styles.detailValue}>{card.condition}</Text>\n                </View>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {/* Similar Cards */}\n        <View style={styles.similarCards}>\n          <Text style={styles.sectionTitle}>Similar Cards</Text>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n            {card.similarCards.map((similarCard, index) => (\n              <View key={index} style={styles.similarCard}>\n                <View style={styles.similarCardImage}>\n                  <Text style={styles.similarCardName}>{similarCard.name}</Text>\n                </View>\n                <Text style={styles.similarCardPrice}>${similarCard.price}</Text>\n                <Text style={[styles.similarCardChange, { color: similarCard.change.startsWith('+') ? '#10B981' : '#EF4444' }]}>\n                  {similarCard.change}\n                </Text>\n              </View>\n            ))}\n          </ScrollView>\n        </View>\n\n        {/* Action Buttons */}\n        {card.owned && (\n          <View style={styles.actionButtons}>\n            <TouchableOpacity style={styles.actionButton}>\n              <Minus size={20} color=\"#FFFFFF\" />\n              <Text style={styles.actionButtonText}>Sell</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.actionButton}>\n              <Edit size={20} color=\"#FFFFFF\" />\n              <Text style={styles.actionButtonText}>Edit</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={[styles.actionButton, styles.actionButtonSecondary]}>\n              <Plus size={20} color=\"#6366F1\" />\n              <Text style={[styles.actionButtonText, styles.actionButtonTextSecondary]}>Add More</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F9FAFB',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 10,\n    paddingBottom: 20,\n  },\n  backButton: {\n    width: 44,\n    height: 44,\n    borderRadius: 12,\n    backgroundColor: '#FFFFFF',\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerActions: {\n    flexDirection: 'row',\n  },\n  headerAction: {\n    width: 44,\n    height: 44,\n    borderRadius: 12,\n    backgroundColor: '#FFFFFF',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardPreview: {\n    marginHorizontal: 20,\n    borderRadius: 20,\n    padding: 24,\n    marginBottom: 24,\n    alignItems: 'center',\n  },\n  cardImageContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  cardImagePlaceholder: {\n    width: 150,\n    height: 210,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cardNumberLarge: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  ownedBadge: {\n    position: 'absolute',\n    top: 12,\n    right: 12,\n    backgroundColor: 'rgba(16, 185, 129, 0.9)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  ownedBadgeText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginLeft: 4,\n  },\n  cardBasicInfo: {\n    alignItems: 'center',\n  },\n  cardName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 4,\n  },\n  cardSet: {\n    fontSize: 14,\n    color: '#FFFFFF',\n    opacity: 0.8,\n    marginBottom: 8,\n  },\n  cardMeta: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  cardRarity: {\n    fontSize: 12,\n    color: '#FFFFFF',\n    opacity: 0.9,\n    marginRight: 12,\n  },\n  cardType: {\n    fontSize: 12,\n    color: '#FFFFFF',\n    opacity: 0.9,\n    marginRight: 12,\n  },\n  cardHp: {\n    fontSize: 12,\n    color: '#FFFFFF',\n    opacity: 0.9,\n  },\n  priceSection: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  priceHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n  },\n  currentPrice: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#111827',\n  },\n  priceChangeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  priceChangeText: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginLeft: 4,\n  },\n  profitLoss: {\n    alignItems: 'flex-end',\n  },\n  profitLossLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginBottom: 2,\n  },\n  profitLossValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 2,\n  },\n  purchaseInfo: {\n    fontSize: 10,\n    color: '#9CA3AF',\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#111827',\n    marginBottom: 16,\n  },\n  chartContainer: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  chartHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  chartTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#111827',\n  },\n  periodSelector: {\n    flexDirection: 'row',\n  },\n  periodButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 8,\n    marginLeft: 8,\n    backgroundColor: '#F3F4F6',\n  },\n  periodButtonActive: {\n    backgroundColor: '#6366F1',\n  },\n  periodButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#6B7280',\n  },\n  periodButtonTextActive: {\n    color: '#FFFFFF',\n  },\n  chart: {\n    flexDirection: 'row',\n    height: 150,\n  },\n  yAxis: {\n    justifyContent: 'space-between',\n    paddingRight: 12,\n    width: 50,\n  },\n  yAxisLabel: {\n    fontSize: 10,\n    color: '#6B7280',\n  },\n  chartArea: {\n    flex: 1,\n    position: 'relative',\n  },\n  priceLineContainer: {\n    flex: 1,\n    position: 'relative',\n  },\n  pricePoint: {\n    position: 'absolute',\n    width: 6,\n    height: 6,\n    borderRadius: 3,\n    backgroundColor: '#6366F1',\n    marginLeft: -3,\n  },\n  xAxis: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n  },\n  xAxisLabel: {\n    fontSize: 10,\n    color: '#6B7280',\n  },\n  marketStats: {\n    marginHorizontal: 20,\n    marginBottom: 20,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  statCard: {\n    width: (width - 60) / 2,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  statValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#111827',\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    textAlign: 'center',\n  },\n  cardDetails: {\n    backgroundColor: '#FFFFFF',\n    marginHorizontal: 20,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  detailsGrid: {\n    // Grid styles\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#F3F4F6',\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#111827',\n  },\n  conditionBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  conditionDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginRight: 8,\n  },\n  similarCards: {\n    marginHorizontal: 20,\n    marginBottom: 20,\n  },\n  similarCard: {\n    width: 120,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 12,\n    marginRight: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  similarCardImage: {\n    width: 80,\n    height: 60,\n    backgroundColor: '#F3F4F6',\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  similarCardName: {\n    fontSize: 10,\n    fontWeight: '500',\n    color: '#111827',\n    textAlign: 'center',\n  },\n  similarCardPrice: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#111827',\n    marginBottom: 2,\n  },\n  similarCardChange: {\n    fontSize: 10,\n    fontWeight: '500',\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    marginHorizontal: 20,\n    marginBottom: 40,\n  },\n  actionButton: {\n    flex: 1,\n    backgroundColor: '#6366F1',\n    borderRadius: 12,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 8,\n  },\n  actionButtonSecondary: {\n    backgroundColor: '#FFFFFF',\n    borderWidth: 2,\n    borderColor: '#6366F1',\n    marginRight: 0,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n    marginLeft: 8,\n  },\n  actionButtonTextSecondary: {\n    color: '#6366F1',\n  },\n});"